<?php

/**
 * @file
 * Collabco message feature.
 */

include_once('collabco_message_feature.features.inc');

/**
 * Implements hook_node_insert().
 */
function collabco_message_feature_node_insert($node) {
  // Save the message and assign it to the user realm. Since another user,
  // usually an admin might create the node, but populate the author field
  // with another user, we make sure the user is populated with the
  // node's author, instead of the acting user (although in most cases it
  // would be the same user).
  
  // Only creat messages for certain content types.
  $type = $node->type;
  if ($type === 'conversation' or $type === 'event' or $type === 'knowledge_object'){ 
    $gids = og_get_entity_groups('node', $node);
    // Create message.
    if (empty($gids)) {
      $message = message_create('create_node', array('uid' => $node->uid));
      // Save reference to the node in the node reference field, and the
      // "publish" state (i.e. if the node is published or unpublished).
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_node_ref->set($node);
      $wrapper->field_published->set($node->status);
      $wrapper->save();
    }
  }

  // OG behaviour (adapted from message og example).
  list(,, $bundle) = entity_extract_ids('node', $node);
  if (!og_is_group_content_type('node', $bundle)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->{'og_membership__' . OG_STATE_ACTIVE}->value()) {
    // Node isn't associate, or doesn't have an active association with
    // any group.
    return;
  }

  $nids = array();
  foreach ($wrapper->{'og_membership__' . OG_STATE_ACTIVE}->value() as $og_membership) {
    if ($og_membership->group_type != 'node') {
      // For simplicity we operate only on membership with node groups.
      continue;
    }
    $nids[] = $og_membership->gid;
  }

  if (!$nids) {
    return;
  }

  // Create a "Post in group" message. We don't use a token replacement
  // here as it needs to get the data from multiple values of the field.
  // Furthermore, this replacement probably doesn't make sense outside of
  // this message-type context, so we don't want to add another token,
  // that will not be used.
  $arguments['!groups'] = array(
    'callback' => 'collabco_message_feature_group_list',
    'pass message' => TRUE,
  );
  $message = message_create('og_post_in_group', array('arguments' => $arguments, 'uid' => $node->uid));

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_ref->set($node);
  $wrapper->field_node_groups_ref->set($nids);
  $wrapper->field_published->set($node->status);
  $wrapper->save();
}

/**
 * Implements hook_comment_insert().
 */
function collabco_message_feature_comment_insert($comment) {
  $account = user_load($comment->uid);
  $node = node_load($comment->nid);

  $gids = og_get_entity_groups('node', $node);
  if (empty($gids)) {
    $message = message_create('create_comment', array(), $account);
    // Save reference to the node in the node reference field, and the
    // "publish" state (i.e. if the node is published or unpublished).
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_node_ref->set($node);
    $wrapper->field_comment_ref->set($comment);

    // The message should be published only if the node and the comment are
    // both published.
    $published = $node->status && $comment->status;
    $wrapper->field_published->set($published);
    $wrapper->save();
  }
}

/**
 * Implements hook_user_insert()
 */
function collabco_message_feature_user_insert(&$edit, $account, $category) {
  $message = message_create('user_register', array(), $account);
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_published->set($account->status);
  $wrapper->save();
}

/**
 * Implements hook_node_update().
 */
function collabco_message_feature_node_update($node) {
  collabco_message_feature_update_message_status('node', $node);
}

/**
 * Implements hook_comment_update().
 */
function collabco_message_feature_comment_update($comment) {
  collabco_message_feature_update_message_status('comment', $comment);
}

/**
 * Update the "published" field in the message entity, when it changes in the
 * related entity.
 *
 * @param $entity_type
 *   The entity type (node or comment).
 * @param $entity
 *   The entity object.
 */
function collabco_message_feature_update_message_status($entity_type, $entity) {
  if ($entity->status == $entity->original->status) {
    // status didn't change.
    return;
  }
  list($id) = entity_extract_ids($entity_type, $entity);
  $field_name = 'field_' . $entity_type . '_ref';

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->fieldCondition($field_name, 'target_id',  $id, '=')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  foreach (array_keys($result['message']) as $mid) {
    $wrapper = entity_metadata_wrapper('message', $mid);
    // If comment status changed, we still need to check the node as-well.
    if ($entity_type == 'comment') {
      $node = node_load($entity->nid);
      $status = intval($entity->status && $node->status);
    }
    else {
      // The entity is the node.
      $status = $entity->status;
    }
    if ($wrapper->field_published->value() != $status) {
      // Status changed, so update the message entity.
      $wrapper->field_published->set($status);
      $wrapper->save();
    }
  }
}

/**
 * Implements hook_og_membership_insert().
 */
function collabco_message_feature_og_membership_insert($og_membership) {
  if ($og_membership->state != OG_STATE_ACTIVE || $og_membership->entity_type != 'user') {
    // Membership isn't active.
    return;
  }

  if ($og_membership->group_type != 'node') {
    // For simplicity we operate only on membership with node groups.
    return;
  }

  if (!$og_membership->etid) {
    // Don't capture membership of anonymous user, that might be caused
    // when using Devel generate.
    return;
  }

  $node = node_load($og_membership->gid);
    // Create a "User joined" message.
  $message = message_create('og_user_membership', array('uid' => $og_membership->etid));

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node_groups_ref[] = $node;
  $wrapper->field_published->set($node->status);
  $wrapper->save();
}

/**
 * Message callback; Show a comma separated list of groups.
 *
 * @param $message
 *   The message entity.
 */
function collabco_message_feature_group_list(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $items = array();
  foreach ($wrapper->field_node_groups_ref->value() as $node) {
    if (!node_access('view', $node)) {
      // User doesn't have access to view the group.
      continue;
    }
    $url = entity_uri('node', $node);
    $label = entity_label('node', $node);
    $items[] = l($label, $url['path'], $url['options']);
  }
  return implode(', ', $items);
}

