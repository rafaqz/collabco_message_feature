<?php

define('MESSAGE_NODE_INSERT','create_node');
define('MESSAGE_NODE_UPDATE','update_node');
define('MESSAGE_COMMENT_INSERT','create_comment');
define('MESSAGE_USER_INSERT','user_register');
define('MESSAGE_OG_INSERT_USER','og_user_membership');

/**
 * @file
 * Collabco message feature.
 */

include_once('collabco_message_feature.features.inc');

/**
 * Implements hook_menu_alter().
 */
function collabco_message_feature_menu_alter(&$items) {
  $items['user/%user/message-subscribe']['title'] = 'Following';
}

/**
 * Implements hook_node_insert().
 */
function collabco_message_feature_node_insert($node) {
  collabco_message_feature_node_message($node, MESSAGE_NODE_INSERT);
  // Allways follow own content.
  $flag = flag_get_flag('follow_node') or die('no "follow_node" flag defined');
  $account = user_load($node->uid);
  $flag->flag('flag', $node->nid, $account);
}

/**
 * Implements hook_node_update().
 */
function collabco_message_feature_node_update($node) {
  collabco_message_feature_update_message_status('node', $node);
  collabco_message_feature_node_message($node, MESSAGE_NODE_UPDATE);
}

/**
 * Implements hook_comment_insert().
 */
function collabco_message_feature_comment_insert($comment) {
  $account = user_load($comment->uid);
  $node = node_load($comment->nid);

  $groups = og_get_entity_groups('node', $node);
  $gids = $groups['node']; 
  $message = message_create('create_comment', array(), $account);
  // Save reference to the node in the node reference field, and the
  // "publish" state (i.e. if the node is published or unpublished).
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $message_wrapper->field_node_ref->set($node);
  $message_wrapper->field_comment_ref->set($comment);
  if (!empty($gids)) {
    $message_wrapper->field_node_groups_ref->set($gids);
  }

  // The message should be published only if the node and the comment are
  // both published.
  $published = $node->status && $comment->status;
  $message_wrapper->field_published->set($published);
  $message_wrapper->save();

  collabco_message_feature_send_notifications('comment', $comment, $message);

  // Allways follow content after you comment on it.
  $flag = flag_get_flag('follow_node') or die('no "follow_node" flag defined');
  $account = user_load($comment->uid);
  $flag->flag('flag', $comment->nid, $account);
}

/**
 * Implements hook_user_insert()
 */
function collabco_message_feature_user_insert(&$edit, $account, $category) {
  $message = message_create('user_register', array(), $account);
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $message_wrapper->field_published->set($account->status);
  $message_wrapper->save();
}

/**
 * Implements hook_comment_update().
 */
function collabco_message_feature_comment_update($comment) {
  collabco_message_feature_update_message_status('comment', $comment);
}

/**
 * Implements hook_og_membership_insert().
 */
function collabco_message_feature_og_membership_insert($og_membership) {
  if ($og_membership->state != OG_STATE_ACTIVE || $og_membership->entity_type != 'user') {
    // Membership isn't active.
    return;
  }

  if ($og_membership->group_type != 'node') {
    // For simplicity we operate only on membership with node groups.
    return;
  }

  if (!$og_membership->etid) {
    // Don't capture membership of anonymous user, that might be caused
    // when using Devel generate.
    return;
  }

  $node = node_load($og_membership->gid);

  $node_wrapper = entity_metadata_wrapper('node', $node);
  if (($node_wrapper->__isset(OG_ACCESS_FIELD)) && ($node_wrapper->{OG_ACCESS_FIELD}->value() == '1')) {
    // Dont add messages when users join private groups.
    return;
  }
    // Create a "User joined" message.
  $message = message_create(MESSAGE_OG_INSERT_USER, array('uid' => $og_membership->etid));
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $message_wrapper->field_node_groups_ref[] = $node;
  $message_wrapper->field_published->set($node->status);
  $message_wrapper->save();

  collabco_message_feature_send_notifications('node', $node, $message);
}

/**
 * Implements hook_node_view_alter().
 */
function collabco_message_feature_node_view_alter(&$build) {
  // Only allow subscription if comments are open.
  if (($build['#node']->comment !== '2')) {
    unset($build['links']['flag']['#links']['flag-follow_node']);
  }
  // Only show group subscription if this is actually a group.
  if (empty($build['#node']->{OG_GROUP_FIELD})) {
    unset($build['links']['flag']['#links']['flag-follow_og']);
  }
  // Hide normal follow for groups, we dont follow them as nodes.
  else {
    unset($build['links']['flag']['#links']['flag-follow_node']);
  }
}

/**
 * Update the "published" field in the message entity, when it changes in the
 * related entity.
 *
 * @param $entity_type
 *   The entity type (node or comment).
 * @param $entity
 *   The entity object.
 */
function collabco_message_feature_update_message_status($entity_type, $entity) {
  if ($entity->status == $entity->original->status) {
    // status didn't change.
    return;
  }

  $messages = collabco_message_feature_get_matching_messages($entity_type, $entity);
  foreach (array_keys($messages) as $mid) {
    $message_wrapper = entity_metadata_wrapper('message', $mid);
    // If comment status changed, we still need to check the node as-well.
    if ($entity_type == 'comment') {
      $node = node_load($entity->nid);
      $status = intval($entity->status && $node->status);
    }
    else {
      // The entity is the node.
      $status = $entity->status;
    }
    if ($message_wrapper->field_published->value() != $status) {
      // Status changed, so update the message entity.
      $message_wrapper->field_published->set($status);
      $message_wrapper->save();
    }
  }
}

function collabco_message_feature_get_matching_messages($entity_type, $entity, $bundle = NULL) {
  list($id) = entity_extract_ids($entity_type, $entity);
  $field_name = 'field_' . $entity_type . '_ref';

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'message')
    ->fieldCondition($field_name, 'target_id',  $id, '=');

  if (!empty($bundle)) {
    $query->entityCondition('bundle', $bundle); 
  }

  $result = $query->execute();

  return $result['message'];
}


function collabco_message_feature_node_message($node, $message_bundle) {
  // Save the message and assign it to the user realm. Since another user,
  // usually an admin might create the node, but populate the author field
  // with another user, we make sure the user is populated with the
  // node's author, instead of the acting user (although in most cases it
  // would be the same user).
  
  $node_wrapper = entity_metadata_wrapper('node', $node);
  if (($node_wrapper->__isset(OG_ACCESS_FIELD)) && ($node_wrapper->{OG_ACCESS_FIELD}->value() == '1')) {
    // Dont add messages for the creation of private groups.
    return;
  }
  $groups = og_get_entity_groups('node', $node);
  // Create a "Post in group" message. We don't use a token replacement
  // here as it needs to get the data from multiple values of the field.
  // Furthermore, this replacement probably doesn't make sense outside of
  // this message-type context, so we don't want to add another token,
  // that will not be used.
  $arguments['!groups'] = array(
    'callback' => 'collabco_message_feature_group_list',
    'pass message' => TRUE,
  );

  // Delete any earlier update messages, so the activity isn't filled with 
  // multiple edits of one thing.
  if ($message_bundle == MESSAGE_NODE_UPDATE) { 
    $messages = collabco_message_feature_get_matching_messages('node', $node, MESSAGE_NODE_UPDATE); 
    foreach (array_keys($messages) as $mid) {
      $message_wrapper = entity_metadata_wrapper('message', $mid);
      $message_wrapper->delete();
    }
  }

  $message = message_create($message_bundle, array('arguments' => $arguments, 'uid' => $node->uid));
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $message_wrapper->field_node_ref->set($node);
  $message_wrapper->field_published->set($node->status);
  if (!empty($groups['node'])) {
    $message_wrapper->field_node_groups_ref->set($groups['node']);
  }
  $message_wrapper->save();

  collabco_message_feature_send_notifications('node', $node, $message);
}

function collabco_message_feature_send_notifications($entity_type, $entity, $message) {
  // Send email subscriptions if they are enabled.
  if (module_exists('message_subscribe')) {
    message_subscribe_send_message($entity_type, $entity, $message);
  }
}

/**
 * Message callback; Show a comma separated list of groups.
 *
 * @param $message
 *   The message entity.
 */
function collabco_message_feature_group_list(Message $message) {
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $items = array();
  foreach ($message_wrapper->field_node_groups_ref->value() as $node) {
    if (!node_access('view', $node)) {
      // User doesn't have access to view the group.
      continue;
    }
    $url = entity_uri('node', $node);
    $label = entity_label('node', $node);
    $items[] = l($label, $url['path'], $url['options']);
  }
  if (!empty($items))
  return t('in ') . implode(', ', $items);
}

